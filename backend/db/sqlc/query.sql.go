// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO Accounts (name, last_name, password, phone_number, email, address) 
VALUES ($1,$2,$3,$4,$5,$6) RETURNING account_id, name, last_name, password, phone_number, email, address
`

type CreateUserParams struct {
	Name        string
	LastName    string
	Password    string
	PhoneNumber pgtype.Text
	Email       pgtype.Text
	Address     pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Account, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.LastName,
		arg.Password,
		arg.PhoneNumber,
		arg.Email,
		arg.Address,
	)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Name,
		&i.LastName,
		&i.Password,
		&i.PhoneNumber,
		&i.Email,
		&i.Address,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT account_id, name, last_name, password, phone_number, email, address FROM Accounts
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (Account, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Name,
		&i.LastName,
		&i.Password,
		&i.PhoneNumber,
		&i.Email,
		&i.Address,
	)
	return i, err
}
